"""
Django settings for nh_cms project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

import environ


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, ['http://localhost:3000', 'localhost', '127.0.0.1']),
    ALLOWED_CIDR_NETS=(list, []),
    SECURE_PROXY_SSL_HEADER_NAME=(str, ''),
    DJANGO_LOG_LEVEL=(str, 'INFO'),
    CORS_ALLOW_ALL_ORIGINS=(bool, False),
    CORS_ALLOWED_ORIGINS=(list, ['http://localhost:3000']),
    AWS_REGION_NAME=(str, ''),
    DEFAULT_STORAGE_BUCKET_NAME=(str, ''),
    DEFAULT_FROM_EMAIL=(str, ''),
    REPLY_TO_EMAIL=(str, ''),
    EMAIL_FROM=(str, ''),
    EMAIL_HOST_USER=(str, ''),
    INNER_AUTHORIZATION_KEYS=(list, []),
    STATIC_ROOT=(str, ''),
    SERVE_STATIC=(bool, False),
    MEDIA_ROOT=(str, os.path.join(BASE_DIR, 'media')),
    SURVEYSPARROW_ACCESS_TOKEN=(str, ''),
    SURVEYSPARROW_BASE_URL=(str, 'https://api.surveysparrow.com/v3'),
    SURVEYSPARROW_SURVEY_ID=(str, '0123456789'),
    SURVEYSPARROW_CHANNEL_ID=(str, ''),
    PDF_BUCKET_NAME=(str, ''),
    LLM_API_KEY=(str, ''),
    BASE_RESET_PASSWORD_URL=(str, ''),
    BASE_VERIFY_ACCOUNT_URL=(str, ''),
    RESET_PASSWORD_REDIRECT_CLIENT_BASE_URLS=(dict, {}),
    VERIFY_ACCOUNT_REDIRECT_CLIENT_BASE_URLS=(dict, {}),
    CELERY_BROKER_URL=(str, ''),
    CELERY_RESULT_BACKEND=(str, 'django-db'),
    CELERY_TASK_ALWAYS_EAGER=(bool, True),
    DS_RSA_KEY=(str, ''),
    DS_JWT_CLIENT_ID=(str, ''),
    DS_USER_GUID=(str, ''),
    DS_OAUTH_SERVER=(str, ''),
    DS_HOST=(str, ''),
    DS_ACCOUNT_ID=(str, ''),
    DS_API_VERSION=(str, ''),
    FRONTEND_URL=(str, ''),
    GOOGLE_DRIVE_STORAGE_ENABLED=(bool, False),
    GOOGLE_DRIVE_STORAGE_CLIENT_SECRET_FILE_PATH=(str, ''),
    GOOGLE_DRIVE_STORAGE_OAUTH_REDIRECT_URI=(str, ''),
    GOOGLE_DRIVE_STORAGE_BASE_FOLDER_ID=(str, None),
    GOOGLE_DRIVE_STORAGE_DRIVE_ID=(str, None),
)

# read environ variables from .env file
environ.Env.read_env(
    os.environ.get('DOTENV_FILE', os.path.join(BASE_DIR, '..', '.env'))
)
DISABLE_DARK_MODE = True

DEBUG = env('DEBUG')

ALLOWED_HOSTS = env('ALLOWED_HOSTS')
ALLOWED_CIDR_NETS = env('ALLOWED_CIDR_NETS')

# local ip is added if needed so health check requests can go through
allowed_local_ip = os.environ.get('ALLOWED_LOCAL_IP')
if allowed_local_ip:
    ALLOWED_HOSTS.append(allowed_local_ip)

# cookies should be https-only in production. will fail if setting is not
# set at all
CSRF_COOKIE_SECURE = env('HTTPS')
SESSION_COOKIE_SECURE = env('HTTPS')

# raises django's ImproperlyConfigured if SECRET_KEY is not available in
# env or file
SECRET_KEY = env('SECRET_KEY')

# Application definition
INSTALLED_APPS = [
    'django_non_dark_admin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_otp',
    'django_otp.plugins.otp_email',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_celery_results',
    'health',
    'user_management',
    'storages',
    'storage',
    'django_ses',
    'otp',
    'chat',
    'properties',
]

MIDDLEWARE = [
    'allow_cidr.middleware.AllowCIDRMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'nh_cms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nh_cms.wsgi.application'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{levelname} {asctime} {name} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': env('DJANGO_LOG_LEVEL'),
            'propagate': False,
        },
    },
}

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {}

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / '..' / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('DATABASE_NAME'),
            'USER': env('DATABASE_USER'),
            'PASSWORD': env('DATABASE_PASS'),
            'HOST': env('DATABASE_HOST'),
            'PORT': env('DATABASE_PORT'),
            'ATOMIC_REQUESTS': True,
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'user_management.CustomUser'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

DATE_INPUT_FORMATS = ['%d-%m-%Y']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = env('STATIC_ROOT')
SERVE_STATIC = env('SERVE_STATIC')


STATICFILES_DIRS = (os.path.join(BASE_DIR, 'lib', 'static'),)

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django-rest-framework settings
REST_FRAMEWORK = {
    'DEFAULT_PARSER_CLASSES': ['rest_framework.parsers.JSONParser'],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'user_management.authentication.CustomTokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

CORS_ALLOW_ALL_ORIGINS = env('CORS_ALLOW_ALL_ORIGINS')
CORS_ALLOWED_ORIGINS = env('CORS_ALLOWED_ORIGINS')
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-authorization',
]

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

if DEBUG:
    STORAGES = {
        'default': {
            'BACKEND': 'django.core.files.storage.FileSystemStorage',
        },
        'staticfiles': {
            'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage',
        },
    }
else:
    STORAGES = {
        'default': {
            'BACKEND': 'storages.backends.s3boto3.S3Boto3Storage',
            'OPTIONS': {
                'bucket_name': env('DEFAULT_STORAGE_BUCKET_NAME'),
            },
        },
        'staticfiles': {
            'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage',
        },
    }

GOOGLE_DRIVE_STORAGE_ENABLED = env('GOOGLE_DRIVE_STORAGE_ENABLED')
GOOGLE_DRIVE_STORAGE_CLIENT_SECRET_FILE_PATH = env(
    'GOOGLE_DRIVE_STORAGE_CLIENT_SECRET_FILE_PATH'
)
GOOGLE_DRIVE_STORAGE_OAUTH_REDIRECT_URI = env('GOOGLE_DRIVE_STORAGE_OAUTH_REDIRECT_URI')
# id of the base folder under which files should be stored. if storing in a
# personal drive this can be None, in which case files will be saved to the
# drive's root. if storing in a shared drive and files should be stored in the
# drive's root this should be the drive id
GOOGLE_DRIVE_STORAGE_BASE_FOLDER_ID = env('GOOGLE_DRIVE_STORAGE_BASE_FOLDER_ID')
# id of the shared drive if files are to be stored in a shared drive. if files
# should be stored in a personal drive this should be None
GOOGLE_DRIVE_STORAGE_DRIVE_ID = env('GOOGLE_DRIVE_STORAGE_DRIVE_ID')

AWS_S3_REGION_NAME = env('AWS_REGION_NAME')

EMAIL_HOST_USER = EMAIL_FROM = DEFAULT_FROM_EMAIL = env('EMAIL_FROM')

if EMAIL_HOST_USER:
    EMAIL_BACKEND = 'django_ses.SESBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

REPLY_TO_EMAIL = env('REPLY_TO_EMAIL')

SECURE_PROXY_SSL_HEADER = None
if env('SECURE_PROXY_SSL_HEADER_NAME'):
    SECURE_PROXY_SSL_HEADER = (env('SECURE_PROXY_SSL_HEADER_NAME'), 'https')

INNER_AUTHORIZATION_KEYS = env('INNER_AUTHORIZATION_KEYS')

SURVEYSPARROW_ACCESS_TOKEN = env('SURVEYSPARROW_ACCESS_TOKEN')
SURVEYSPARROW_BASE_URL = env('SURVEYSPARROW_BASE_URL')
SURVEYSPARROW_SURVEY_ID = env('SURVEYSPARROW_SURVEY_ID')
SURVEYSPARROW_CHANNEL_ID = env('SURVEYSPARROW_CHANNEL_ID')

PDF_BUCKET_NAME = env('PDF_BUCKET_NAME')

LLM_API_KEY = env('LLM_API_KEY')

BASE_RESET_PASSWORD_URL = env('BASE_RESET_PASSWORD_URL')
BASE_VERIFY_ACCOUNT_URL = env('BASE_VERIFY_ACCOUNT_URL')

# Set Password
BASE_SET_PASSWORD_URL = env('BASE_SET_PASSWORD_URL')
# these are urls for the deep link redirection view. a url with the key
# "unmatched" should always be added for invalid client redirection
RESET_PASSWORD_REDIRECT_CLIENT_BASE_URLS = env(
    'RESET_PASSWORD_REDIRECT_CLIENT_BASE_URLS'
)
VERIFY_ACCOUNT_REDIRECT_CLIENT_BASE_URLS = env(
    'VERIFY_ACCOUNT_REDIRECT_CLIENT_BASE_URLS'
)

# celery settings
CELERY_BROKER_URL = env('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND')
CELERY_TASK_ALWAYS_EAGER = env('CELERY_TASK_ALWAYS_EAGER')
CELERY_TASK_EAGER_PROPAGATES = True

# Docsign settings
DS_RSA_KEY = env('DS_RSA_KEY')
DS_JWT_CLIENT_ID = env('DS_JWT_CLIENT_ID')
DS_USER_GUID = env('DS_USER_GUID')
DS_OAUTH_SERVER = env('DS_OAUTH_SERVER')
DS_HOST = env('DS_HOST')
DS_ACCOUNT_ID = env('DS_ACCOUNT_ID')
DS_API_VERSION = env('DS_API_VERSION')

# Django OTP
OTP_EMAIL_SUBJECT = '2FA Code: Secure Your Account Access'
OTP_EMAIL_BODY_HTML_TEMPLATE_PATH = 'emails/send_otp.html'
OTP_EMAIL_BODY_TEMPLATE_PATH = 'emails/send_otp.txt'

# frontend base url
FRONTEND_BASE_URL = env('FRONTEND_BASE_URL')
